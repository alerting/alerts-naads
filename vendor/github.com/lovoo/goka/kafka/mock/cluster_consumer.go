// Automatically generated by MockGen. DO NOT EDIT!
// Source: group_consumer.go

package mock

import (
	sarama "github.com/Shopify/sarama"
	sarama_cluster "github.com/bsm/sarama-cluster"
	gomock "github.com/golang/mock/gomock"
)

// Mock of clusterConsumer interface
type MockclusterConsumer struct {
	ctrl     *gomock.Controller
	recorder *_MockclusterConsumerRecorder
}

// Recorder for MockclusterConsumer (not exported)
type _MockclusterConsumerRecorder struct {
	mock *MockclusterConsumer
}

func NewMockclusterConsumer(ctrl *gomock.Controller) *MockclusterConsumer {
	mock := &MockclusterConsumer{ctrl: ctrl}
	mock.recorder = &_MockclusterConsumerRecorder{mock}
	return mock
}

func (_m *MockclusterConsumer) EXPECT() *_MockclusterConsumerRecorder {
	return _m.recorder
}

func (_m *MockclusterConsumer) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockclusterConsumerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockclusterConsumer) MarkPartitionOffset(topic string, partition int32, offset int64, metadata string) {
	_m.ctrl.Call(_m, "MarkPartitionOffset", topic, partition, offset, metadata)
}

func (_mr *_MockclusterConsumerRecorder) MarkPartitionOffset(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MarkPartitionOffset", arg0, arg1, arg2, arg3)
}

func (_m *MockclusterConsumer) Notifications() <-chan *sarama_cluster.Notification {
	ret := _m.ctrl.Call(_m, "Notifications")
	ret0, _ := ret[0].(<-chan *sarama_cluster.Notification)
	return ret0
}

func (_mr *_MockclusterConsumerRecorder) Notifications() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Notifications")
}

func (_m *MockclusterConsumer) Messages() <-chan *sarama.ConsumerMessage {
	ret := _m.ctrl.Call(_m, "Messages")
	ret0, _ := ret[0].(<-chan *sarama.ConsumerMessage)
	return ret0
}

func (_mr *_MockclusterConsumerRecorder) Messages() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Messages")
}

func (_m *MockclusterConsumer) Errors() <-chan error {
	ret := _m.ctrl.Call(_m, "Errors")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

func (_mr *_MockclusterConsumerRecorder) Errors() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Errors")
}
