// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lovoo/goka (interfaces: Context)

// Package main is a generated GoMock package.
package main

import (
	gomock "github.com/golang/mock/gomock"
	goka "github.com/lovoo/goka"
	reflect "reflect"
	time "time"
)

// MockContext is a mock of Context interface
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockContext) Delete() {
	m.ctrl.Call(m, "Delete")
}

// Delete indicates an expected call of Delete
func (mr *MockContextMockRecorder) Delete() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContext)(nil).Delete))
}

// Emit mocks base method
func (m *MockContext) Emit(arg0 goka.Stream, arg1 string, arg2 interface{}) {
	m.ctrl.Call(m, "Emit", arg0, arg1, arg2)
}

// Emit indicates an expected call of Emit
func (mr *MockContextMockRecorder) Emit(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockContext)(nil).Emit), arg0, arg1, arg2)
}

// Fail mocks base method
func (m *MockContext) Fail(arg0 error) {
	m.ctrl.Call(m, "Fail", arg0)
}

// Fail indicates an expected call of Fail
func (mr *MockContextMockRecorder) Fail(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fail", reflect.TypeOf((*MockContext)(nil).Fail), arg0)
}

// Join mocks base method
func (m *MockContext) Join(arg0 goka.Table) interface{} {
	ret := m.ctrl.Call(m, "Join", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Join indicates an expected call of Join
func (mr *MockContextMockRecorder) Join(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockContext)(nil).Join), arg0)
}

// Key mocks base method
func (m *MockContext) Key() string {
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key
func (mr *MockContextMockRecorder) Key() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockContext)(nil).Key))
}

// Lookup mocks base method
func (m *MockContext) Lookup(arg0 goka.Table, arg1 string) interface{} {
	ret := m.ctrl.Call(m, "Lookup", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Lookup indicates an expected call of Lookup
func (mr *MockContextMockRecorder) Lookup(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockContext)(nil).Lookup), arg0, arg1)
}

// Loopback mocks base method
func (m *MockContext) Loopback(arg0 string, arg1 interface{}) {
	m.ctrl.Call(m, "Loopback", arg0, arg1)
}

// Loopback indicates an expected call of Loopback
func (mr *MockContextMockRecorder) Loopback(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Loopback", reflect.TypeOf((*MockContext)(nil).Loopback), arg0, arg1)
}

// Offset mocks base method
func (m *MockContext) Offset() int64 {
	ret := m.ctrl.Call(m, "Offset")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Offset indicates an expected call of Offset
func (mr *MockContextMockRecorder) Offset() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockContext)(nil).Offset))
}

// Partition mocks base method
func (m *MockContext) Partition() int32 {
	ret := m.ctrl.Call(m, "Partition")
	ret0, _ := ret[0].(int32)
	return ret0
}

// Partition indicates an expected call of Partition
func (mr *MockContextMockRecorder) Partition() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Partition", reflect.TypeOf((*MockContext)(nil).Partition))
}

// SetValue mocks base method
func (m *MockContext) SetValue(arg0 interface{}) {
	m.ctrl.Call(m, "SetValue", arg0)
}

// SetValue indicates an expected call of SetValue
func (mr *MockContextMockRecorder) SetValue(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockContext)(nil).SetValue), arg0)
}

// Timestamp mocks base method
func (m *MockContext) Timestamp() time.Time {
	ret := m.ctrl.Call(m, "Timestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Timestamp indicates an expected call of Timestamp
func (mr *MockContextMockRecorder) Timestamp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamp", reflect.TypeOf((*MockContext)(nil).Timestamp))
}

// Topic mocks base method
func (m *MockContext) Topic() goka.Stream {
	ret := m.ctrl.Call(m, "Topic")
	ret0, _ := ret[0].(goka.Stream)
	return ret0
}

// Topic indicates an expected call of Topic
func (mr *MockContextMockRecorder) Topic() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockContext)(nil).Topic))
}

// Value mocks base method
func (m *MockContext) Value() interface{} {
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value
func (mr *MockContextMockRecorder) Value() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockContext)(nil).Value))
}
