// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/lovoo/goka/storage (interfaces: Storage)

package mock

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/lovoo/goka/storage"
)

// Mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *_MockStorageRecorder
}

// Recorder for MockStorage (not exported)
type _MockStorageRecorder struct {
	mock *MockStorage
}

func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &_MockStorageRecorder{mock}
	return mock
}

func (_m *MockStorage) EXPECT() *_MockStorageRecorder {
	return _m.recorder
}

func (_m *MockStorage) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStorageRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockStorage) Delete(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Delete", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStorageRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockStorage) Get(_param0 string) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockStorage) GetOffset(_param0 int64) (int64, error) {
	ret := _m.ctrl.Call(_m, "GetOffset", _param0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageRecorder) GetOffset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOffset", arg0)
}

func (_m *MockStorage) Has(_param0 string) (bool, error) {
	ret := _m.ctrl.Call(_m, "Has", _param0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageRecorder) Has(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Has", arg0)
}

func (_m *MockStorage) Iterator() (storage.Iterator, error) {
	ret := _m.ctrl.Call(_m, "Iterator")
	ret0, _ := ret[0].(storage.Iterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageRecorder) Iterator() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Iterator")
}

func (_m *MockStorage) IteratorWithRange(_param0 []byte, _param1 []byte) (storage.Iterator, error) {
	ret := _m.ctrl.Call(_m, "IteratorWithRange", _param0, _param1)
	ret0, _ := ret[0].(storage.Iterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageRecorder) IteratorWithRange(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IteratorWithRange", arg0, arg1)
}

func (_m *MockStorage) MarkRecovered() error {
	ret := _m.ctrl.Call(_m, "MarkRecovered")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStorageRecorder) MarkRecovered() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MarkRecovered")
}

func (_m *MockStorage) Open() error {
	ret := _m.ctrl.Call(_m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStorageRecorder) Open() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open")
}

func (_m *MockStorage) Recovered() bool {
	ret := _m.ctrl.Call(_m, "Recovered")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockStorageRecorder) Recovered() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Recovered")
}

func (_m *MockStorage) Set(_param0 string, _param1 []byte) error {
	ret := _m.ctrl.Call(_m, "Set", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStorageRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set", arg0, arg1)
}

func (_m *MockStorage) SetOffset(_param0 int64) error {
	ret := _m.ctrl.Call(_m, "SetOffset", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStorageRecorder) SetOffset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetOffset", arg0)
}
